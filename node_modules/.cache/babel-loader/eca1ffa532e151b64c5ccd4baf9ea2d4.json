{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHttp } from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  _s();\n\n  const {\n    loading,\n    request,\n    error\n  } = useHttp();\n  _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\n  _baseOffset = 210;\n\n  const getAllCharacters = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _baseOffset;\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async id => {\n    const res = await getResource(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  _transformCharacter = char => {\n    let description;\n\n    if (char.description === '') {\n      description = 'No description for this character...';\n    } else if (char.description.length > 210) {\n      description = char.description.slice(0, 210) + '...';\n    } else {\n      description = char.description;\n    }\n\n    return {\n      id: char.id,\n      name: char.name,\n      description: description,\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items\n    };\n  };\n};\n\n_s(useMarvelService, \"7tk3rzNAyQKh/nKrzr/Nd6bathk=\", false, function () {\n  return [useHttp];\n});\n\nexport default useMarvelService; // const postData = async (url, data) => {\n//     let res = await fetch(url, {\n//         method: \"POST\",\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: data\n//     });\n//     return await res.json();\n// };\n// async function getResource(url) {\n//     let res = await fetch(url);\n//     if (!res.ok) {\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n//     }\n//     return await res.json();\n// }\n// export {postData};\n// export {getResource};","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/services/MarvelService.js"],"names":["useHttp","useMarvelService","loading","request","error","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","data","results","map","_transformCharacter","getCharacter","id","getResource","char","description","length","slice","name","thumbnail","path","extension","homepage","urls","url","wiki","comics","items"],"mappings":";;AACA,SAASA,OAAT,QAAwB,oBAAxB;;AACA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAA8BJ,OAAO,EAA3C;AAEAK,EAAAA,QAAQ,GAAE,2CAAV;AACAC,EAAAA,OAAO,GAAG,kCAAV;AACAC,EAAAA,WAAW,GAAG,GAAd;;AAIA,QAAMC,gBAAgB,GAAG,kBAAgC;AAAA,QAAzBC,MAAyB,uEAAhBF,WAAgB;AACrD,UAAMG,GAAG,GAAI,MAAMP,OAAO,CAAE,GAAEE,QAAS,6BAA4BI,MAAO,WAAUH,OAAQ,EAAlE,CAA1B;AACA,WAAOI,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqBC,mBAArB,CAAP;AACH,GAHD;;AAKA,QAAMC,YAAY,GAAG,MAAOC,EAAP,IAAc;AAC/B,UAAMN,GAAG,GAAG,MAAMO,WAAW,CAAE,GAAEZ,QAAS,cAAaW,EAAG,WAAUV,OAAQ,EAA/C,CAA7B;AACA,WAAOQ,mBAAmB,CAACJ,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiB,CAAjB,CAAD,CAA1B;AACH,GAHD;;AAKAE,EAAAA,mBAAmB,GAAII,IAAD,IAAU;AAC5B,QAAIC,WAAJ;;AACA,QAAID,IAAI,CAACC,WAAL,KAAqB,EAAzB,EAA6B;AACzBA,MAAAA,WAAW,GAAG,sCAAd;AACH,KAFD,MAEO,IAAID,IAAI,CAACC,WAAL,CAAiBC,MAAjB,GAA0B,GAA9B,EAAmC;AACtCD,MAAAA,WAAW,GAAGD,IAAI,CAACC,WAAL,CAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,GAA1B,IAAiC,KAA/C;AACH,KAFM,MAEA;AACHF,MAAAA,WAAW,GAAGD,IAAI,CAACC,WAAnB;AACH;;AAGD,WAAO;AACHH,MAAAA,EAAE,EAAEE,IAAI,CAACF,EADN;AAEHM,MAAAA,IAAI,EAAEJ,IAAI,CAACI,IAFR;AAGHH,MAAAA,WAAW,EAAEA,WAHV;AAIHI,MAAAA,SAAS,EAAEL,IAAI,CAACK,SAAL,CAAeC,IAAf,GAAsB,GAAtB,GAA4BN,IAAI,CAACK,SAAL,CAAeE,SAJnD;AAKHC,MAAAA,QAAQ,EAAER,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaC,GALpB;AAMHC,MAAAA,IAAI,EAAEX,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaC,GANhB;AAOHE,MAAAA,MAAM,EAAEZ,IAAI,CAACY,MAAL,CAAYC;AAPjB,KAAP;AASH,GApBD;AAqBH,CAxCD;;GAAM9B,gB;UACkCD,O;;;AAyCxC,eAAeC,gBAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA","sourcesContent":["\r\nimport { useHttp } from '../hooks/http.hook';\r\nconst useMarvelService = () => {\r\n    const { loading, request, error } = useHttp();\r\n\r\n    _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    _baseOffset = 210;\r\n\r\n    \r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res  = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await getResource(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    _transformCharacter = (char) => {\r\n        let description;\r\n        if (char.description === '') {\r\n            description = 'No description for this character...';\r\n        } else if (char.description.length > 210) {\r\n            description = char.description.slice(0, 210) + '...';\r\n        } else {\r\n            description = char.description;\r\n        }\r\n\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};"]},"metadata":{},"sourceType":"module"}