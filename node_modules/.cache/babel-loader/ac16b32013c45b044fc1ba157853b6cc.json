{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHttp } from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  _s();\n\n  const {\n    loading,\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\n  const _baseOffset = 210;\n\n  const getAllComics = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\n    return res.data.results.map(_transformComic);\n  };\n\n  const getComic = async id => {\n    const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\n    console.log(res.data.results, \"results\");\n    return _transformComic(res.data.results);\n  };\n\n  const getAllCharacters = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _baseOffset;\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async id => {\n    const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const _transformComic = comic => {\n    return {\n      id: comic.id,\n      title: comic.title,\n      price: comic.prices[0].price,\n      thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\n      url: comic.urls[0].url,\n      pageCount: comic\n    };\n  };\n\n  const _transformCharacter = char => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character...',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items\n    };\n  };\n\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getAllComics,\n    getComic\n  };\n};\n\n_s(useMarvelService, \"uUyY7lUIwkf2no8vbgFvZlrZhN4=\", false, function () {\n  return [useHttp];\n});\n\nexport default useMarvelService; // const postData = async (url, data) => {\n//     let res = await fetch(url, {\n//         method: \"POST\",\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: data\n//     });\n//     return await res.json();\n// };\n// async function getResource(url) {\n//     let res = await fetch(url);\n//     if (!res.ok) {\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n//     }\n//     return await res.json();\n// }\n// export {postData};\n// export {getResource};","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/services/MarvelService.js"],"names":["useHttp","useMarvelService","loading","request","error","clearError","_apiBase","_apiKey","_baseOffset","getAllComics","offset","res","data","results","map","_transformComic","getComic","id","console","log","getAllCharacters","_transformCharacter","getCharacter","comic","title","price","prices","thumbnail","path","extension","url","urls","pageCount","char","name","description","slice","homepage","wiki","comics","items"],"mappings":"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","sourcesContent":["\r\nimport { useHttp } from '../hooks/http.hook';\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        console.log(res.data.results, \"results\");\r\n        return _transformComic(res.data.results);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res  = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            price: comic.prices[0].price,\r\n            thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n            url: comic.urls[0].url,\r\n            pageCount: comic\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};"]},"metadata":{},"sourceType":"module"}