{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nexport const useHttp = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(async function (url) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'GET';\n    let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n      'Content-type': 'application/json'\n    };\n    setLoading(true);\n\n    try {\n      const responce = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n\n      if (!responce.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${responce.status}`);\n      }\n\n      const data = await responce.json();\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError\n  };\n};\n\n_s(useHttp, \"w9wu6oI7w4pVGEgS2BBRo34zM+A=\");","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/hooks/http.hook.js"],"names":["useState","useCallback","useHttp","loading","setLoading","error","setError","request","url","method","body","headers","responce","fetch","ok","Error","status","data","json","e","message","clearError"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACzB,QAAM,CAAEC,OAAF,EAAWC,UAAX,IAA0BJ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAAEK,KAAF,EAASC,QAAT,IAAsBN,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMO,OAAO,GAAGN,WAAW,CAAE,gBAAOO,GAAP,EAA0F;AAAA,QAA9EC,MAA8E,uEAAvE,KAAuE;AAAA,QAAhEC,IAAgE,uEAAzD,IAAyD;AAAA,QAAnDC,OAAmD,uEAAzC;AAAC,sBAAgB;AAAjB,KAAyC;AAEnHP,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAEA,QAAI;AACA,YAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAM;AAACC,QAAAA,MAAD;AAASC,QAAAA,IAAT;AAAeC,QAAAA;AAAf,OAAN,CAA5B;;AAEA,UAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AACd,cAAM,IAAIC,KAAJ,CAAW,mBAAkBP,GAAI,aAAYI,QAAQ,CAACI,MAAO,EAA7D,CAAN;AACH;;AAED,YAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AAEAd,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,aAAOa,IAAP;AAEH,KAZD,CAYE,OAAME,CAAN,EAAS;AACPf,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAACa,CAAC,CAACC,OAAH,CAAR;AACA,YAAMD,CAAN;AACH;AAEJ,GAtB0B,EAsBxB,EAtBwB,CAA3B;AAwBA,QAAME,UAAU,GAAGpB,WAAW,CAAC,MAAKK,QAAQ,CAAC,IAAD,CAAd,EAAsB,EAAtB,CAA9B;AAEA,SAAO;AAAEH,IAAAA,OAAF;AAAWI,IAAAA,OAAX;AAAoBF,IAAAA,KAApB;AAA2BgB,IAAAA;AAA3B,GAAP;AAEH,CAhCM;;GAAMnB,O","sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [ loading, setLoading ] = useState(false);\r\n    const [ error, setError ] = useState(null);\r\n\r\n    const request = useCallback( async (url, method='GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            \r\n            if (!responce.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${responce.status}`);\r\n            }\r\n\r\n            const data = await responce.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(()=> setError(null), []);\r\n\r\n    return { loading, request, error, clearError }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}