{"ast":null,"code":"var _jsxFileName = \"C:\\\\DiskA\\\\Frontend\\\\Udemy2021Tasks\\\\Projects\\\\React\\\\marvel\\\\marvel-app\\\\src\\\\components\\\\charList\\\\CharList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect, useRef } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport ImgObjFit from '../blocks/imgObjectFit';\nimport './charList.scss';\nimport propTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CharList = props => {\n  _s();\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(1541);\n  const [charEnded, setCharEnded] = useState(false);\n  const {\n    loading,\n    error,\n    getAllCharacters\n  } = useMarvelService();\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = newCharList => {\n    let ended = false;\n\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charlist => [...charList, ...newCharList]);\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 9);\n    setCharEnded(charEnded => ended);\n  };\n\n  const spinner = loading && !newItemLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 50\n  }, this) : null;\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 34\n  }, this) : null; // const content = !(loading || error) ? <Items onCharSelected={props.onCharSelected} charlist={charList}/> : null;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comimcs__loading\",\n      children: [errorMessage, spinner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: /*#__PURE__*/_jsxDEV(Items, {\n        onCharSelected: props.onCharSelected,\n        charlist: charList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      onClick: () => onRequest(offset),\n      disabled: newItemLoading,\n      style: {\n        'display': charEnded ? 'none' : 'block'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CharList, \"aQumfFZTI8WB+ntpOnktGI3rotY=\", false, function () {\n  return [useMarvelService];\n});\n\n_c = CharList;\n\nconst Items = props => {\n  _s2();\n\n  const [charId, setCharId] = useState(null); // const [selected, setSelect] = useState(false);\n\n  const [isFocused, setFocus] = useState(false);\n\n  const onItemSelected = (id, elem) => {\n    setCharId(id); // setSelect(true);\n\n    setFocus(true);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  return props.charlist.map((item, i) => {\n    const {\n      id,\n      name\n    } = item;\n    let classNames = 'char__item';\n\n    if (id === charId && isFocused) {\n      classNames += ' char__item_selected';\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: classNames,\n      ref: el => itemRefs.current[i] = el,\n      onClick: () => {\n        props.onCharSelected(id);\n        onItemSelected(id);\n      },\n      tabIndex: \"0\",\n      onKeyPress: e => {\n        if (e.key === ' ' || e.key === \"Enter\") {\n          props.onCharSelected(id);\n          focusOnItem(i);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(ImgObjFit, {\n        char: item,\n        alt: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"char__name\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }, this);\n  });\n};\n\n_s2(Items, \"K5pL6G9SU1X2rHNxJIwppHHDcGs=\");\n\n_c2 = Items;\nCharList.propTypes = {\n  onCharSelected: propTypes.func.isRequired\n};\nexport default CharList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CharList\");\n$RefreshReg$(_c2, \"Items\");","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/components/charList/CharList.js"],"names":["useMarvelService","useState","useEffect","useRef","Spinner","ErrorMessage","ImgObjFit","propTypes","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","loading","error","getAllCharacters","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","charlist","spinner","errorMessage","onCharSelected","Items","charId","setCharId","isFocused","setFocus","onItemSelected","id","elem","itemRefs","focusOnItem","current","forEach","item","classList","remove","add","focus","map","i","name","classNames","el","e","key","func","isRequired"],"mappings":"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","sourcesContent":["import useMarvelService from '../../services/MarvelService';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport ImgObjFit from '../blocks/imgObjectFit';\r\nimport './charList.scss';\r\nimport propTypes from 'prop-types';\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(1541);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    },[])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded);\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true\r\n        }\r\n\r\n        setCharList(charlist => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n        \r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    // const content = !(loading || error) ? <Items onCharSelected={props.onCharSelected} charlist={charList}/> : null;\r\n\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            <div className='comimcs__loading'>\r\n                {errorMessage}\r\n                {spinner}\r\n            </div>\r\n            <ul className=\"char__grid\">\r\n                <Items onCharSelected={props.onCharSelected} charlist={charList} />\r\n                {/* {content} */}\r\n            </ul>\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Items = (props) => {\r\n\r\n    const [charId, setCharId] = useState(null);\r\n    // const [selected, setSelect] = useState(false);\r\n    const [isFocused, setFocus] = useState(false);\r\n\r\n    const onItemSelected = (id, elem) => {\r\n        setCharId(id);\r\n        // setSelect(true);\r\n        setFocus(true);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    return (\r\n        props.charlist.map((item, i) => {\r\n            const {id, name} = item;\r\n\r\n            let classNames = 'char__item';\r\n            if (id === charId && isFocused) {\r\n                classNames += ' char__item_selected';\r\n            }\r\n            \r\n            return (\r\n                <li className={classNames}\r\n                    key={id}\r\n                    ref={el => itemRefs.current[i] = el}\r\n                    onClick={() => {\r\n                        props.onCharSelected(id);\r\n                        onItemSelected(id);\r\n                    }}\r\n                    tabIndex='0'\r\n                    onKeyPress={(e) => { \r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelected(id);\r\n                            focusOnItem(i);\r\n                        }}}>\r\n                    <ImgObjFit char={item} alt={name}/>\r\n                    <div className=\"char__name\">{name}</div>\r\n                </li>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: propTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;"]},"metadata":{},"sourceType":"module"}