{"ast":null,"code":"import { useHttp } from '../hooks/http.hook';\n\nclass MarvelService {\n  constructor() {\n    var _this = this;\n\n    this._apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    this._apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\n    this._baseOffset = 210;\n\n    this.getAllCharacters = async function () {\n      let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this._baseOffset;\n      const res = await _this.getResource(`${_this._apiBase}characters?limit=9&offset=${offset}&apikey=${_this._apiKey}`);\n      return res.data.results.map(_this._transformCharacter);\n    };\n\n    this.getCharacter = async id => {\n      const res = await this.getResource(`${this._apiBase}characters/${id}?apikey=${this._apiKey}`);\n      return this._transformCharacter(res.data.results[0]);\n    };\n\n    this._transformCharacter = char => {\n      let description;\n\n      if (char.description === '') {\n        description = 'No description for this character...';\n      } else if (char.description.length > 210) {\n        description = char.description.slice(0, 210) + '...';\n      } else {\n        description = char.description;\n      }\n\n      return {\n        id: char.id,\n        name: char.name,\n        description: description,\n        thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n        homepage: char.urls[0].url,\n        wiki: char.urls[1].url,\n        comics: char.comics.items\n      };\n    };\n  }\n\n}\n\nexport default MarvelService; // const postData = async (url, data) => {\n//     let res = await fetch(url, {\n//         method: \"POST\",\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: data\n//     });\n//     return await res.json();\n// };\n// async function getResource(url) {\n//     let res = await fetch(url);\n//     if (!res.ok) {\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n//     }\n//     return await res.json();\n// }\n// export {postData};\n// export {getResource};","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/services/MarvelService.js"],"names":["useHttp","MarvelService","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","getResource","data","results","map","_transformCharacter","getCharacter","id","char","description","length","slice","name","thumbnail","path","extension","homepage","urls","url","wiki","comics","items"],"mappings":"AACA,SAASA,OAAT,QAAwB,oBAAxB;;AACA,MAAMC,aAAN,CAAoB;AAAA;AAAA;;AAAA,SAChBC,QADgB,GACN,2CADM;AAAA,SAEhBC,OAFgB,GAEN,kCAFM;AAAA,SAGhBC,WAHgB,GAGF,GAHE;;AAAA,SAOhBC,gBAPgB,GAOG,kBAAqC;AAAA,UAA9BC,MAA8B,uEAArB,KAAI,CAACF,WAAgB;AACpD,YAAMG,GAAG,GAAI,MAAM,KAAI,CAACC,WAAL,CAAkB,GAAE,KAAI,CAACN,QAAS,6BAA4BI,MAAO,WAAU,KAAI,CAACH,OAAQ,EAA5F,CAAnB;AACA,aAAOI,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqB,KAAI,CAACC,mBAA1B,CAAP;AACH,KAVe;;AAAA,SAYhBC,YAZgB,GAYD,MAAOC,EAAP,IAAc;AACzB,YAAMP,GAAG,GAAG,MAAM,KAAKC,WAAL,CAAkB,GAAE,KAAKN,QAAS,cAAaY,EAAG,WAAU,KAAKX,OAAQ,EAAzE,CAAlB;AACA,aAAO,KAAKS,mBAAL,CAAyBL,GAAG,CAACE,IAAJ,CAASC,OAAT,CAAiB,CAAjB,CAAzB,CAAP;AACH,KAfe;;AAAA,SAiBhBE,mBAjBgB,GAiBOG,IAAD,IAAU;AAC5B,UAAIC,WAAJ;;AACA,UAAID,IAAI,CAACC,WAAL,KAAqB,EAAzB,EAA6B;AACzBA,QAAAA,WAAW,GAAG,sCAAd;AACH,OAFD,MAEO,IAAID,IAAI,CAACC,WAAL,CAAiBC,MAAjB,GAA0B,GAA9B,EAAmC;AACtCD,QAAAA,WAAW,GAAGD,IAAI,CAACC,WAAL,CAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,GAA1B,IAAiC,KAA/C;AACH,OAFM,MAEA;AACHF,QAAAA,WAAW,GAAGD,IAAI,CAACC,WAAnB;AACH;;AAGD,aAAO;AACHF,QAAAA,EAAE,EAAEC,IAAI,CAACD,EADN;AAEHK,QAAAA,IAAI,EAAEJ,IAAI,CAACI,IAFR;AAGHH,QAAAA,WAAW,EAAEA,WAHV;AAIHI,QAAAA,SAAS,EAAEL,IAAI,CAACK,SAAL,CAAeC,IAAf,GAAsB,GAAtB,GAA4BN,IAAI,CAACK,SAAL,CAAeE,SAJnD;AAKHC,QAAAA,QAAQ,EAAER,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaC,GALpB;AAMHC,QAAAA,IAAI,EAAEX,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaC,GANhB;AAOHE,QAAAA,MAAM,EAAEZ,IAAI,CAACY,MAAL,CAAYC;AAPjB,OAAP;AASH,KArCe;AAAA;;AAAA;;AAwCpB,eAAe3B,aAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA","sourcesContent":["\r\nimport { useHttp } from '../hooks/http.hook';\r\nclass MarvelService {\r\n    _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    _baseOffset = 210;\r\n\r\n    \r\n\r\n    getAllCharacters = async (offset = this._baseOffset) => {\r\n        const res  = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&apikey=${this._apiKey}`);\r\n        return res.data.results.map(this._transformCharacter);\r\n    }\r\n\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?apikey=${this._apiKey}`);\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    _transformCharacter = (char) => {\r\n        let description;\r\n        if (char.description === '') {\r\n            description = 'No description for this character...';\r\n        } else if (char.description.length > 210) {\r\n            description = char.description.slice(0, 210) + '...';\r\n        } else {\r\n            description = char.description;\r\n        }\r\n\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n}\r\n\r\nexport default MarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};"]},"metadata":{},"sourceType":"module"}