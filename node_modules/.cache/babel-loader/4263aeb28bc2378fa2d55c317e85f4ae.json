{"ast":null,"code":"import _asyncToGenerator from\"C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _createClass from\"C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classCallCheck from\"C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _regeneratorRuntime from\"C:\\\\DiskA\\\\Frontend\\\\Udemy2021Tasks\\\\Projects\\\\React\\\\marvel\\\\marvel-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";var MarvelService=/*#__PURE__*/_createClass(function MarvelService(){var _this=this;_classCallCheck(this,MarvelService);this._apiBase='https://gateway.marvel.com:443/v1/public/';this._apiKey='ecbc50ab1d1d150b779bd5f2481d19e0';this._baseOffset=210;this.getResource=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url){var res;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch(url);case 2:res=_context.sent;if(res.ok){_context.next=5;break;}throw new Error(\"Could not fetch \".concat(url,\", status: \").concat(res.status));case 5:_context.next=7;return res.json();case 7:return _context.abrupt(\"return\",_context.sent);case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();this.getAllCharacters=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var offset,res,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:offset=_args2.length>0&&_args2[0]!==undefined?_args2[0]:_this._baseOffset;_context2.next=3;return _this.getResource(\"\".concat(_this._apiBase,\"characters?limit=9&offset=\").concat(offset,\"&apikey=\").concat(_this._apiKey));case 3:res=_context2.sent;return _context2.abrupt(\"return\",res.data.results.map(_this._transformCharacter));case 5:case\"end\":return _context2.stop();}}},_callee2);}));this.getCharacter=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id){var res;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return _this.getResource(\"\".concat(_this._apiBase,\"characters/\").concat(id,\"?apikey=\").concat(_this._apiKey));case 2:res=_context3.sent;return _context3.abrupt(\"return\",_this._transformCharacter(res.data.results[0]));case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref3.apply(this,arguments);};}();this._transformCharacter=function(char){var description;if(char.description===''){description='No description for this character...';}else if(char.description.length>210){description=char.description.slice(0,210)+'...';}else{description=char.description;}return{id:char.id,name:char.name,description:description,thumbnail:char.thumbnail.path+'.'+char.thumbnail.extension,homepage:char.urls[0].url,wiki:char.urls[1].url,comics:char.comics.items};};});export default MarvelService;// const postData = async (url, data) => {\n//     let res = await fetch(url, {\n//         method: \"POST\",\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: data\n//     });\n//     return await res.json();\n// };\n// async function getResource(url) {\n//     let res = await fetch(url);\n//     if (!res.ok) {\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n//     }\n//     return await res.json();\n// }\n// export {postData};\n// export {getResource};","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/services/MarvelService.js"],"names":["MarvelService","_apiBase","_apiKey","_baseOffset","getResource","url","fetch","res","ok","Error","status","json","getAllCharacters","offset","data","results","map","_transformCharacter","getCharacter","id","char","description","length","slice","name","thumbnail","path","extension","homepage","urls","wiki","comics","items"],"mappings":"8vBAEMA,CAAAA,a,4GACFC,Q,CAAU,2C,MACVC,O,CAAU,kC,MACVC,W,CAAc,G,MAEdC,W,0FAAc,iBAAOC,GAAP,gJACMC,CAAAA,KAAK,CAACD,GAAD,CADX,QACNE,GADM,kBAGLA,GAAG,CAACC,EAHC,8BAIA,IAAIC,CAAAA,KAAJ,2BAA6BJ,GAA7B,sBAA6CE,GAAG,CAACG,MAAjD,EAJA,8BAOGH,CAAAA,GAAG,CAACI,IAAJ,EAPH,6G,oEAUdC,gB,sEAAmB,wKAAOC,MAAP,kDAAgB,KAAI,CAACV,WAArB,wBACI,CAAA,KAAI,CAACC,WAAL,WAAoB,KAAI,CAACH,QAAzB,sCAA8DY,MAA9D,oBAA+E,KAAI,CAACX,OAApF,EADJ,QACTK,GADS,iDAERA,GAAG,CAACO,IAAJ,CAASC,OAAT,CAAiBC,GAAjB,CAAqB,KAAI,CAACC,mBAA1B,CAFQ,0D,QAKnBC,Y,2FAAe,kBAAOC,EAAP,qJACO,CAAA,KAAI,CAACf,WAAL,WAAoB,KAAI,CAACH,QAAzB,uBAA+CkB,EAA/C,oBAA4D,KAAI,CAACjB,OAAjE,EADP,QACLK,GADK,iDAEJ,KAAI,CAACU,mBAAL,CAAyBV,GAAG,CAACO,IAAJ,CAASC,OAAT,CAAiB,CAAjB,CAAzB,CAFI,0D,sEAKfE,mB,CAAsB,SAACG,IAAD,CAAU,CAC5B,GAAIC,CAAAA,WAAJ,CACA,GAAID,IAAI,CAACC,WAAL,GAAqB,EAAzB,CAA6B,CACzBA,WAAW,CAAG,sCAAd,CACH,CAFD,IAEO,IAAID,IAAI,CAACC,WAAL,CAAiBC,MAAjB,CAA0B,GAA9B,CAAmC,CACtCD,WAAW,CAAGD,IAAI,CAACC,WAAL,CAAiBE,KAAjB,CAAuB,CAAvB,CAA0B,GAA1B,EAAiC,KAA/C,CACH,CAFM,IAEA,CACHF,WAAW,CAAGD,IAAI,CAACC,WAAnB,CACH,CAGD,MAAO,CACHF,EAAE,CAAEC,IAAI,CAACD,EADN,CAEHK,IAAI,CAAEJ,IAAI,CAACI,IAFR,CAGHH,WAAW,CAAEA,WAHV,CAIHI,SAAS,CAAEL,IAAI,CAACK,SAAL,CAAeC,IAAf,CAAsB,GAAtB,CAA4BN,IAAI,CAACK,SAAL,CAAeE,SAJnD,CAKHC,QAAQ,CAAER,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaxB,GALpB,CAMHyB,IAAI,CAAEV,IAAI,CAACS,IAAL,CAAU,CAAV,EAAaxB,GANhB,CAOH0B,MAAM,CAAEX,IAAI,CAACW,MAAL,CAAYC,KAPjB,CAAP,CASH,C,IAGL,cAAehC,CAAAA,aAAf,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA","sourcesContent":["\r\n\r\nclass MarvelService {\r\n    _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    _baseOffset = 210;\r\n\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);\r\n    \r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n    \r\n        return await res.json();\r\n    }\r\n\r\n    getAllCharacters = async (offset = this._baseOffset) => {\r\n        const res  = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&apikey=${this._apiKey}`);\r\n        return res.data.results.map(this._transformCharacter);\r\n    }\r\n\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?apikey=${this._apiKey}`);\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    _transformCharacter = (char) => {\r\n        let description;\r\n        if (char.description === '') {\r\n            description = 'No description for this character...';\r\n        } else if (char.description.length > 210) {\r\n            description = char.description.slice(0, 210) + '...';\r\n        } else {\r\n            description = char.description;\r\n        }\r\n\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n}\r\n\r\nexport default MarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};"]},"metadata":{},"sourceType":"module"}