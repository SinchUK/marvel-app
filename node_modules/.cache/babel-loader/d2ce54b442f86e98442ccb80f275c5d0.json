{"ast":null,"code":"var _jsxFileName = \"C:\\\\DiskA\\\\Frontend\\\\Udemy2021Tasks\\\\Projects\\\\React\\\\marvel\\\\marvel-app\\\\src\\\\components\\\\charList\\\\CharList.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport useMarvelService from '../../services/MarvelService';\nimport { useState, useEffect, useRef } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport ImgObjFit from '../blocks/imgObjectFit';\nimport './charList.scss';\nimport './charList.css';\nimport propTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CharList = props => {\n  _s();\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(1541);\n  const [charEnded, setCharEnded] = useState(false);\n  const [listLoaded, setListLoaded] = useState(false);\n  const {\n    loading,\n    error,\n    getAllCharacters\n  } = useMarvelService();\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset).then(onCharListLoaded);\n  };\n\n  const onCharListLoaded = newCharList => {\n    let ended = false;\n    setListLoaded(true);\n\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n\n    setCharList(charlist => [...charList, ...newCharList]);\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 9);\n    setCharEnded(charEnded => ended);\n  };\n\n  const spinner = loading && !newItemLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 50\n  }, this) : null;\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 34\n  }, this) : null; // const content = !(loading || error) ? <Items onCharSelected={props.onCharSelected} charlist={charList}/> : null;\n\n  console.log(listLoaded, \"loaded!\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__loading\",\n      children: [errorMessage, spinner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__grid\",\n      children: /*#__PURE__*/_jsxDEV(Items, {\n        listLoaded: listLoaded,\n        onCharSelected: props.onCharSelected,\n        charlist: charList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button__main button__long\",\n      onClick: () => onRequest(offset),\n      disabled: newItemLoading,\n      style: {\n        'display': charEnded ? 'none' : 'block'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CharList, \"DEWvOYJFYw7Cy/jh8chHOPs+HMg=\", false, function () {\n  return [useMarvelService];\n});\n\n_c = CharList;\n\nconst Items = props => {\n  _s2();\n\n  const [charId, setCharId] = useState(null); // const [selected, setSelect] = useState(false);\n\n  const [isFocused, setFocus] = useState(false);\n\n  const onItemSelected = (id, elem) => {\n    setCharId(id); // setSelect(true);\n\n    setFocus(true);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  return props.charlist.map((item, i) => {\n    const {\n      id,\n      name\n    } = item; // console.log(comics, \"item from props\");\n\n    let classNames = 'char__item';\n\n    if (id === charId && isFocused) {\n      classNames += ' char__item_selected';\n    }\n\n    return /*#__PURE__*/_jsxDEV(TransitionGroup, {\n      component: null,\n      children: /*#__PURE__*/_jsxDEV(CSSTransition, {\n        timeout: 300,\n        classNames: \"char__item\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: classNames,\n          ref: el => itemRefs.current[i] = el,\n          onClick: () => {\n            props.onCharSelected(id);\n            onItemSelected(id);\n          },\n          tabIndex: \"0\",\n          onKeyPress: e => {\n            if (e.key === ' ' || e.key === \"Enter\") {\n              props.onCharSelected(id);\n              focusOnItem(i);\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(ImgObjFit, {\n            char: item,\n            alt: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"char__name\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)]\n        }, id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this);\n  });\n};\n\n_s2(Items, \"K5pL6G9SU1X2rHNxJIwppHHDcGs=\");\n\n_c2 = Items;\nCharList.propTypes = {\n  onCharSelected: propTypes.func.isRequired\n};\nexport default CharList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CharList\");\n$RefreshReg$(_c2, \"Items\");","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/components/charList/CharList.js"],"names":["useMarvelService","useState","useEffect","useRef","Spinner","ErrorMessage","ImgObjFit","propTypes","CSSTransition","TransitionGroup","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","listLoaded","setListLoaded","loading","error","getAllCharacters","onRequest","initial","then","onCharListLoaded","newCharList","ended","length","charlist","spinner","errorMessage","console","log","onCharSelected","Items","charId","setCharId","isFocused","setFocus","onItemSelected","id","elem","itemRefs","focusOnItem","current","forEach","item","classList","remove","add","focus","map","i","name","classNames","el","e","key","func","isRequired"],"mappings":"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","sourcesContent":["import useMarvelService from '../../services/MarvelService';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport ImgObjFit from '../blocks/imgObjectFit';\r\nimport './charList.scss';\r\nimport './charList.css';\r\nimport propTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(1541);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    const [listLoaded, setListLoaded] = useState(false);\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    },[])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded);\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        setListLoaded(true);\r\n        if (newCharList.length < 9) {\r\n            ended = true\r\n        }\r\n\r\n        setCharList(charlist => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n        \r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    // const content = !(loading || error) ? <Items onCharSelected={props.onCharSelected} charlist={charList}/> : null;\r\n    console.log(listLoaded, \"loaded!\");\r\n    return (\r\n        <div className=\"char__list\">\r\n            <div className='char__loading'>\r\n                {errorMessage}\r\n                {spinner}\r\n            </div>\r\n            <ul className=\"char__grid\">\r\n                <Items listLoaded={listLoaded} onCharSelected={props.onCharSelected} charlist={charList} />\r\n            </ul>\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Items = (props) => {\r\n\r\n    const [charId, setCharId] = useState(null);\r\n    // const [selected, setSelect] = useState(false);\r\n    const [isFocused, setFocus] = useState(false);\r\n\r\n    const onItemSelected = (id, elem) => {\r\n        setCharId(id);\r\n        // setSelect(true);\r\n        setFocus(true);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n\r\n    return (\r\n        props.charlist.map((item, i) => {\r\n            const {id, name} = item;\r\n            // console.log(comics, \"item from props\");\r\n\r\n            let classNames = 'char__item';\r\n            if (id === charId && isFocused) {\r\n                classNames += ' char__item_selected';\r\n            }\r\n            \r\n            return (\r\n                <TransitionGroup component={null}>\r\n                    <CSSTransition timeout={300} classNames=\"char__item\">\r\n                        <li className={classNames}\r\n                            key={id}\r\n                            ref={el => itemRefs.current[i] = el}\r\n                            onClick={() => {\r\n                                props.onCharSelected(id);\r\n                                onItemSelected(id);\r\n                            }}\r\n                            tabIndex='0'\r\n                            onKeyPress={(e) => { \r\n                                if (e.key === ' ' || e.key === \"Enter\") {\r\n                                    props.onCharSelected(id);\r\n                                    focusOnItem(i);\r\n                                }}}>\r\n                            <ImgObjFit char={item} alt={name}/>\r\n                            <div className=\"char__name\">{name}</div>\r\n                        </li>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n                \r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: propTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;"]},"metadata":{},"sourceType":"module"}