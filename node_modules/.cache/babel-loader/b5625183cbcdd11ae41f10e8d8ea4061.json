{"ast":null,"code":"var _jsxFileName = \"C:\\\\DiskA\\\\Frontend\\\\Udemy2021Tasks\\\\Projects\\\\React\\\\marvel\\\\marvel-app\\\\src\\\\components\\\\charList\\\\CharList.js\";\nimport MarvelService from '../../services/MarvelService';\nimport { Component } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport ImgObjFit from '../blocks/imgObjectFit';\nimport './charList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CharList extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      charList: [],\n      loading: true,\n      error: false,\n      newItemLoading: false,\n      offset: 1541,\n      charEnded: false\n    };\n    this.marvelService = new MarvelService();\n\n    this.onRequest = offset => {\n      this.onCharListLoading();\n      this.marvelService.getAllCharacters(offset).then(this.onCharListLoaded).catch(this.onError);\n    };\n\n    this.onCharListLoading = () => {\n      this.setState({\n        newItemLoading: true\n      });\n    };\n\n    this.onCharListLoaded = newCharList => {\n      let ended = false;\n\n      if (newCharList.length < 9) {\n        ended = true;\n      }\n\n      this.setState(_ref => {\n        let {\n          charList,\n          offset\n        } = _ref;\n        return {\n          charList: [...charList, ...newCharList],\n          loading: false,\n          newItemLoading: false,\n          offset: offset + 9,\n          charEnded: ended\n        };\n      });\n    };\n\n    this.onError = () => {\n      this.setState({\n        error: true,\n        loading: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.onRequest();\n  }\n\n  render() {\n    const {\n      charList,\n      loading,\n      error,\n      offset,\n      charEnded,\n      newItemLoading\n    } = this.state;\n    const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 35\n    }, this) : null;\n    const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 38\n    }, this) : null;\n    const content = !(loading || error) ? /*#__PURE__*/_jsxDEV(Items, {\n      onCharSelected: this.props.onCharSelected,\n      charlist: charList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 47\n    }, this) : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__list\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"char__grid\",\n        children: [errorMessage, spinner, content]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button button__main button__long\",\n        onClick: () => this.onRequest(offset),\n        disabled: newItemLoading,\n        style: {\n          'display': charEnded ? 'none' : 'block'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inner\",\n          children: \"load more\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Items extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      id: null,\n      selected: false,\n      isFocused: false\n    };\n\n    this.onItemSelected = (id, elem) => {\n      this.setState({\n        selected: true,\n        isFocused: true,\n        id: id\n      });\n    };\n\n    this.itemRefs = [];\n\n    this.setRef = ref => {\n      this.itemRefs.push(ref);\n    };\n\n    this.focusOnItem = id => {\n      console.log(id, 'focus');\n      this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\n      this.itemRefs[id].classList.add('char__item_selected');\n      this.itemRefs[id].focus();\n    };\n  }\n\n  render() {\n    const {\n      charlist,\n      onCharSelected\n    } = this.props;\n    return charlist.map((item, i) => {\n      const {\n        id,\n        name\n      } = item;\n      let classNames = 'char__item';\n\n      if (id === this.state.id && this.state.isFocused) {\n        classNames += ' char__item_selected';\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: classNames,\n        ref: this.setRef,\n        onClick: () => {\n          onCharSelected(id);\n          this.onItemSelected(id);\n        },\n        tabIndex: \"0\",\n        onKeyPress: e => {\n          if (e.key === ' ' || e.key === \"Enter\") {\n            this.props.onCharSelected(id);\n            this.focusOnItem(i);\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(ImgObjFit, {\n          char: item,\n          alt: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__name\",\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this)]\n      }, id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this);\n    });\n  }\n\n}\n\nexport default CharList;","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/components/charList/CharList.js"],"names":["MarvelService","Component","Spinner","ErrorMessage","ImgObjFit","CharList","state","charList","loading","error","newItemLoading","offset","charEnded","marvelService","onRequest","onCharListLoading","getAllCharacters","then","onCharListLoaded","catch","onError","setState","newCharList","ended","length","componentDidMount","render","spinner","errorMessage","content","props","onCharSelected","Items","id","selected","isFocused","onItemSelected","elem","itemRefs","setRef","ref","push","focusOnItem","console","log","forEach","item","classList","remove","add","focus","charlist","map","i","name","classNames","e","key"],"mappings":"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","sourcesContent":["import MarvelService from '../../services/MarvelService';\r\nimport { Component } from 'react';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport ImgObjFit from '../blocks/imgObjectFit';\r\nimport './charList.scss';\r\n\r\n\r\nclass CharList extends Component {\r\n\r\n    state = {\r\n        charList: [],\r\n        loading: true,\r\n        error: false,\r\n        newItemLoading: false,\r\n        offset: 1541,\r\n        charEnded: false\r\n    }\r\n\r\n    marvelService = new MarvelService();\r\n\r\n    componentDidMount() {\r\n        this.onRequest();\r\n    }\r\n\r\n    onRequest = (offset) => {\r\n        this.onCharListLoading();\r\n        this.marvelService.getAllCharacters(offset)\r\n            .then(this.onCharListLoaded)\r\n            .catch(this.onError);\r\n    }\r\n\r\n    onCharListLoading = () => {\r\n        this.setState({\r\n            newItemLoading: true\r\n        })\r\n    }\r\n\r\n    onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true\r\n        }\r\n\r\n        this.setState(({charList, offset}) => ({\r\n                charList: [...charList, ...newCharList],\r\n                loading: false,\r\n                newItemLoading: false,\r\n                offset:  offset + 9,\r\n                charEnded: ended\r\n            }));\r\n    }\r\n        \r\n    onError = () => {\r\n        this.setState({\r\n            error: true,\r\n            loading: false\r\n        })\r\n    }\r\n   \r\n    render() {\r\n        const {charList, loading, error, offset,charEnded, newItemLoading} = this.state;\r\n\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const content = !(loading || error) ? <Items onCharSelected={this.props.onCharSelected} charlist={charList}/> : null;\r\n\r\n        return (\r\n            <div className=\"char__list\">\r\n                <ul className=\"char__grid\">\r\n                    {errorMessage}\r\n                    {spinner}\r\n                    {content}\r\n                </ul>\r\n                <button \r\n                    className=\"button button__main button__long\"\r\n                    onClick={() => this.onRequest(offset)}\r\n                    disabled={newItemLoading}\r\n                    style={{'display': charEnded ? 'none' : 'block'}}>\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Items extends Component {\r\n    state = {\r\n        id: null,\r\n        selected: false,\r\n        isFocused: false\r\n    }\r\n\r\n\r\n    onItemSelected = (id, elem) => {\r\n        this.setState({\r\n            selected: true,\r\n            isFocused: true,\r\n            id: id\r\n        })\r\n\r\n    }\r\n\r\n    itemRefs = [];\r\n\r\n    setRef = (ref) => {\r\n        this.itemRefs.push(ref);\r\n    }\r\n\r\n    focusOnItem = (id) => {\r\n        console.log(id, 'focus');\r\n        this.itemRefs.forEach(item => item.classList.remove('char__item_selected'));\r\n        this.itemRefs[id].classList.add('char__item_selected');\r\n        this.itemRefs[id].focus();\r\n    }\r\n\r\n    render () {\r\n       \r\n        const {charlist, onCharSelected} = this.props;\r\n\r\n        return (\r\n            charlist.map((item, i) => {\r\n                const {id, name} = item;\r\n\r\n                let classNames = 'char__item';\r\n                if (id === this.state.id && this.state.isFocused) {\r\n                    classNames += ' char__item_selected';\r\n                }\r\n                \r\n                return (\r\n                    <li className={classNames}\r\n                        key={id}\r\n                        ref={this.setRef}\r\n                        onClick={() => {\r\n                            onCharSelected(id);\r\n                            this.onItemSelected(id);\r\n                        }}\r\n                        tabIndex='0'\r\n                        onKeyPress={(e) => { \r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                this.props.onCharSelected(id);\r\n                                this.focusOnItem(i);\r\n                            }}}>\r\n                        <ImgObjFit char={item} alt={name}/>\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                )\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nexport default CharList;"]},"metadata":{},"sourceType":"module"}