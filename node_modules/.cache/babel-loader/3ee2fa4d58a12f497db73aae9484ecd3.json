{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useHttp } from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  _s();\n\n  const {\n    loading,\n    request,\n    error,\n    clearError\n  } = useHttp();\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\n  const _baseOffset = 210;\n\n  const getAllComics = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  };\n\n  const getAllCharacters = async function () {\n    let offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _baseOffset;\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\n    console.log(res.data.results, \"characters\");\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async id => {\n    const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      price: comics.prices[0],\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension\n    };\n  };\n\n  const _transformCharacter = char => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character...',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items\n    };\n  };\n\n  return {\n    loading,\n    error,\n    getAllCharacters,\n    getCharacter,\n    clearError,\n    getAllComics\n  };\n};\n\n_s(useMarvelService, \"uUyY7lUIwkf2no8vbgFvZlrZhN4=\", false, function () {\n  return [useHttp];\n});\n\nexport default useMarvelService; // const postData = async (url, data) => {\n//     let res = await fetch(url, {\n//         method: \"POST\",\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: data\n//     });\n//     return await res.json();\n// };\n// async function getResource(url) {\n//     let res = await fetch(url);\n//     if (!res.ok) {\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n//     }\n//     return await res.json();\n// }\n// export {postData};\n// export {getResource};","map":{"version":3,"sources":["C:/DiskA/Frontend/Udemy2021Tasks/Projects/React/marvel/marvel-app/src/services/MarvelService.js"],"names":["useHttp","useMarvelService","loading","request","error","clearError","_apiBase","_apiKey","_baseOffset","getAllComics","offset","res","data","results","map","_transformComics","getAllCharacters","console","log","_transformCharacter","getCharacter","id","comics","title","price","prices","thumbnail","path","extension","char","name","description","slice","homepage","urls","url","wiki","items"],"mappings":"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","sourcesContent":["\r\nimport { useHttp } from '../hooks/http.hook';\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res  = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\r\n        console.log(res.data.results, \"characters\");\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            price: comics.prices[0],\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};"]},"metadata":{},"sourceType":"module"}