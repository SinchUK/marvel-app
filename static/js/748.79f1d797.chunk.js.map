{"version":3,"file":"static/js/748.79f1d797.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit:\r\n         'contain', margin: '0 auto' }} src={img} alt=\"error img\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './comicsList.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { Link } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [offset, setOffset ] = useState(1000);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const {loading, error, getAllComics} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    },[])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded);\r\n    }\r\n\r\n    const  onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n        setNewItemLoading(newItemLoading => false);\r\n        setComicsList([...comicsList, ...newComicsList]); \r\n\r\n        setOffset(offset => offset + 8);\r\n        setComicsEnded(comicsEnded => ended);\r\n        // (newComicsList) => [...comicsList, ...newComicsList]\r\n    }\r\n\r\n    function renderItems (arr) {\r\n        const items = arr.map(( item, i ) => {\r\n            const {title, thumbnail, price, id} = item;\r\n            return (\r\n                <CSSTransition  in={true} key={id} timeout={300} classNames=\"comics__item\">\r\n                    <li key={i} className=\"comics__item\">\r\n                        <Link to={`/comics/${id}`}>\r\n                            <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\r\n                            <div className=\"comics__item-name\">{title}</div>\r\n                            <div className=\"comics__item-price\">{price}</div>\r\n                        </Link>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <ul className='comics__grid'>\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(comicsList);\r\n\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            <div className='comimcs__loading'>\r\n                {errorMessage}\r\n                {spinner}\r\n            </div>\r\n            <TransitionGroup component={null}>\r\n                {items}\r\n            </TransitionGroup>\r\n            \r\n            <button \r\n                className=\"button button__main button__long\"\r\n                style={{'display': comicsEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemLoading}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\n\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with lis of our comics\"/>\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","\r\nimport { useHttp } from '../hooks/http.hook';\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&orderBy=name&apikey=${_apiKey}`);\r\n        // return res.data.results.map(_transformComic);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res  = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            price: comic.prices[0].price === 0 ? \"Not available\" : comic.prices[0].price+'$',\r\n            thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n            url: comic.urls[0].url,\r\n            pageCount: comic.pageCount || 'No information about the number of pages',\r\n            // language: comic.textObjects[0] === undefined ? 'en - us' : comic.textObjects[0].language,\r\n            language: comic.textObjects?.length ? comic.textObjects[0].language : 'en-us',\r\n            description: comic.description || 'There is no description',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [ loading, setLoading ] = useState(false);\r\n    const [ error, setError ] = useState(null);\r\n\r\n    const request = useCallback( async (url, method='GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            \r\n            if (!responce.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${responce.status}`);\r\n            }\r\n\r\n            const data = await responce.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(()=> setError(null), []);\r\n\r\n    return { loading, request, error, clearError }\r\n\r\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","useState","comicsList","setComicsList","offset","setOffset","newItemLoading","setNewItemLoading","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","title","thumbnail","price","id","CSSTransition","in","timeout","classNames","to","renderItems","spinner","Spinner","errorMessage","ErrorMessage","TransitionGroup","component","onClick","disabled","Helmet","name","content","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","responce","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","res","results","_transformComic","getCharacterByName","_transformCharacter","getComic","getAllCharacters","getCharacter","comic","prices","path","extension","urls","pageCount","language","textObjects","description","char","slice","homepage","wiki","comics"],"sourceRoot":""}