{"version":3,"file":"static/js/748.7e381dfa.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit:\r\n         'contain', margin: '0 auto' }} src={img} alt=\"error img\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './comicsList.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { Link } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst ComicsList = () => {\r\n\r\n    const [comicsList, setComicsList] = useState([]);\r\n    const [offset, setOffset ] = useState(1000);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [comicsEnded, setComicsEnded] = useState(false);\r\n\r\n    const {loading, error, getAllComics} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    },[])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicsListLoaded);\r\n    }\r\n\r\n    const  onComicsListLoaded = (newComicsList) => {\r\n        let ended = false;\r\n        if (newComicsList.length < 8) {\r\n            ended = true;\r\n        }\r\n        setNewItemLoading(newItemLoading => false);\r\n        setComicsList([...comicsList, ...newComicsList]); \r\n\r\n        setOffset(offset => offset + 8);\r\n        setComicsEnded(comicsEnded => ended);\r\n        // (newComicsList) => [...comicsList, ...newComicsList]\r\n    }\r\n\r\n    function renderItems (arr) {\r\n        const items = arr.map(( item, i ) => {\r\n            const {title, thumbnail, price, id} = item;\r\n            return (\r\n                <li key={i} className=\"comics__item\">\r\n                    <Link to={`/comics/${id}`}>\r\n                        <img src={thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\r\n                        <div className=\"comics__item-name\">{title}</div>\r\n                        <div className=\"comics__item-price\">{price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <ul className='comics__grid'>\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(comicsList);\r\n\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            <div className='comimcs__loading'>\r\n                {errorMessage}\r\n                {spinner}\r\n            </div>\r\n            {items}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                style={{'display': comicsEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemLoading}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ComicsList;","import AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\n\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","\r\nimport { useHttp } from '../hooks/http.hook';\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res  = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            price: comic.prices[0].price === 0 ? \"Not available\" : comic.prices[0].price+'$',\r\n            thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n            url: comic.urls[0].url,\r\n            pageCount: comic.pageCount || 'No information about the number of pages',\r\n            // language: comic.textObjects[0] === undefined ? 'en - us' : comic.textObjects[0].language,\r\n            language: comic.textObjects?.length ? comic.textObjects[0].language : 'en-us',\r\n            description: comic.description || 'There is no description',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [ loading, setLoading ] = useState(false);\r\n    const [ error, setError ] = useState(null);\r\n\r\n    const request = useCallback( async (url, method='GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            \r\n            if (!responce.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${responce.status}`);\r\n            }\r\n\r\n            const data = await responce.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(()=> setError(null), []);\r\n\r\n    return { loading, request, error, clearError }\r\n\r\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","useState","comicsList","setComicsList","offset","setOffset","newItemLoading","setNewItemLoading","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","title","thumbnail","price","id","to","renderItems","spinner","Spinner","errorMessage","ErrorMessage","onClick","disabled","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","responce","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","res","results","_transformComic","getComic","getAllCharacters","_transformCharacter","getCharacter","comic","prices","path","extension","urls","pageCount","language","textObjects","description","char","name","slice","homepage","wiki","comics","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}