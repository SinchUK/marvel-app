{"version":3,"file":"static/js/472.a313339a.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/pages/SingleComicPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import img from './error.gif';\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit:\r\n         'contain', margin: '0 auto' }} src={img} alt=\"error img\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './singleComicPage.scss';\r\nimport  useMarvelService  from '../../services/MarvelService';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from '../appBanner/AppBanner';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\n\r\nconst SingleComicPage = () => {    \r\n\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const [inProp, setInProp] = useState(false);\r\n\r\n    const { loading, error, getComic, clearError } = useMarvelService();\r\n\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    },[comicId])\r\n\r\n   const updateComic = () => { \r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n   const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n        setInProp(true);\r\n    }\r\n\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const content = !(loading || error  || !comic) ? <View inProp={inProp} comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic, inProp}) => {\r\n    // console.log(comic, \"comic\");\r\n    const {title, thumbnail, description, pageCount, language, price, id} = comic;\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <CSSTransition in={inProp} key={id} timeout={300} classNames='single-comic__img'>\r\n                <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            </CSSTransition> \r\n            <CSSTransition in ={inProp} timeout={300} classNames=\"single-comic__info\">\r\n                <div className=\"single-comic__info\">\r\n                    <h2 className=\"single-comic__name\">{title}</h2>\r\n                    <p className=\"single-comic__descr\">{description}</p>\r\n                    <p className=\"single-comic__descr\">Pages: {pageCount}</p>\r\n                    <p className=\"single-comic__descr\">Language: {language}</p>\r\n                    <div className=\"single-comic__price\">Price: {price}</div>\r\n                </div>\r\n            </CSSTransition>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","\r\nimport { useHttp } from '../hooks/http.hook';\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res  = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            price: comic.prices[0].price === 0 ? \"Not available\" : comic.prices[0].price+'$',\r\n            thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n            url: comic.urls[0].url,\r\n            pageCount: comic.pageCount || 'No information about the number of pages',\r\n            // language: comic.textObjects[0] === undefined ? 'en - us' : comic.textObjects[0].language,\r\n            language: comic.textObjects?.length ? comic.textObjects[0].language : 'en-us',\r\n            description: comic.description || 'There is no description',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [ loading, setLoading ] = useState(false);\r\n    const [ error, setError ] = useState(null);\r\n\r\n    const request = useCallback( async (url, method='GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            \r\n            if (!responce.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${responce.status}`);\r\n            }\r\n\r\n            const data = await responce.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(()=> setError(null), []);\r\n\r\n    return { loading, request, error, clearError }\r\n\r\n}"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","img","View","comic","inProp","title","thumbnail","description","pageCount","language","price","id","CSSTransition","in","timeout","classNames","to","comicId","useParams","useState","setComic","setInProp","useMarvelService","loading","error","getComic","clearError","useEffect","updateComic","then","onComicLoaded","spinner","Spinner","errorMessage","ErrorMessage","content","AppBanner","setLoading","setError","request","useCallback","url","method","body","headers","fetch","responce","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllComics","offset","res","results","map","_transformComic","getAllCharacters","_transformCharacter","getCharacter","prices","path","extension","urls","textObjects","length","char","name","slice","homepage","wiki","comics","items"],"sourceRoot":""}