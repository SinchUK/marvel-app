{"version":3,"file":"static/js/714.fc1de7b1.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/blocks/imgObjectFit.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/search/CharSearch.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit:\r\n         'contain', margin: '0 auto' }} src={img} alt=\"error img\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","\r\n\r\nconst ImgObjFit = ({char}) => {\r\n    const {thumbnail} = char;\r\n    \r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" || thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\") {\r\n        return (\r\n            <img src={thumbnail} \r\n            alt=\"Random character\" \r\n            style={{objectFit:\"contain\"}} \r\n            className=\"randomchar__img\"/>\r\n        )\r\n    } else {\r\n        return (\r\n            <img src={thumbnail} \r\n            alt=\"Random character\" \r\n            className=\"randomchar__img\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImgObjFit;","import useMarvelService from '../../services/MarvelService';\r\nimport './randomChar.scss';\r\n\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport ImgObjFit from '../blocks/imgObjectFit';\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n    const {loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(()=> {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <View char={char}/> : null;\r\n    \r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\">\r\n                    <div className=\"inner\"\r\n                           onClick={updateChar}>try it\r\n                    </div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, homepage, wiki} = char;\r\n    \r\n    return (\r\n            <div className=\"randomchar__block\">\r\n                <ImgObjFit char={char}/>\r\n                <div className=\"randomchar__info\">\r\n                    <p className=\"randomchar__name\">{name}</p>\r\n                    <p className=\"randomchar__descr\">\r\n                        {description}\r\n                    </p>\r\n                    <div className=\"randomchar__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\n// const Img = ({char}) => {\r\n//     const {thumbnail} = char;\r\n    \r\n//     if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n//         return (\r\n//             <img src={thumbnail} alt=\"Random character\" style={{objectFit:\"contain\"}} className=\"randomchar__img\"/>\r\n//         )\r\n//     } else {\r\n//         return (\r\n//             <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default RandomChar;","import useMarvelService from '../../services/MarvelService';\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport ImgObjFit from '../blocks/imgObjectFit';\r\nimport './charList.scss';\r\nimport propTypes from 'prop-types';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(1541);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { loading, error, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    },[])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded);\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true\r\n        }\r\n\r\n        setCharList(charlist => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    }\r\n        \r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    // const content = !(loading || error) ? <Items onCharSelected={props.onCharSelected} charlist={charList}/> : null;\r\n    return (\r\n        <div className=\"char__list\">\r\n            <div className='char__loading'>\r\n                {errorMessage}\r\n                {spinner}\r\n            </div>\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null} >\r\n                    <Items onCharSelected={props.onCharSelected} charlist={charList} />\r\n                </TransitionGroup>\r\n            </ul>\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Items = (props) => {\r\n\r\n    const [charId, setCharId] = useState(null);\r\n    // const [selected, setSelect] = useState(false);\r\n    const [isFocused, setFocus] = useState(false);\r\n\r\n    const onItemSelected = (id, elem) => {\r\n        setCharId(id);\r\n        // setSelect(true);\r\n        setFocus(true);\r\n    }\r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n\r\n    return (\r\n        props.charlist.map((item, i) => {\r\n            const {id, name} = item;\r\n            // console.log(comics, \"item from props\");\r\n            let classNames = 'char__item';\r\n            if (id === charId && isFocused) {\r\n                classNames += ' char__item_selected';\r\n            }\r\n        \r\n            return (\r\n                <CSSTransition in={true} key={id} timeout={300} classNames=\"char__item\">\r\n                    <li className={classNames}\r\n                        key={id}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(id);\r\n                            onItemSelected(id);\r\n                        }}\r\n                        tabIndex='0'\r\n                        onKeyPress={(e) => { \r\n                            if (e.key === ' ' || e.key === \"Enter\") {\r\n                                props.onCharSelected(id);\r\n                                focusOnItem(i);\r\n                            }}}>\r\n                        <ImgObjFit char={item} alt={name}/>\r\n                        <div className=\"char__name\">{name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: propTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import useMarvelService from '../../services/MarvelService';\r\nimport { useState } from 'react';\r\nimport { ErrorMessage as FormikErrorMEssage, Field, Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearch.scss';\r\n\r\n\r\n\r\nconst CharSearch = () => {\r\n    const {error, loading, getCharacterByName} = useMarvelService();\r\n    const [char, setChar] = useState(null);\r\n\r\n    const updateChar = (name) => {\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n            setChar(char);\r\n        }\r\n\r\n   \r\n    const SearchSuccess = () => {\r\n        return (\r\n            <div className='char__search-info'>\r\n                <div className='char__search-success'>\r\n                    There is! Visit \r\n                        <span className='search-success'> {char[0].name} </span> \r\n                    page?\r\n                </div>\r\n                <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                    <div className=\"inner\">TO PAGE</div>\r\n                </Link>\r\n            </div>  \r\n        )\r\n    }\r\n    const errorMessage = error ? <div className='char__search-critical-error'><ErrorMessage/></div> : null;\r\n    const results = !char ? null : char.length > 0 ? <SearchSuccess/> : <div className='char__search-error'>The character was not found. Check the name and try again.</div>\r\n\r\n    return (\r\n        \r\n        <div className=\"char__search\">\r\n            <Formik \r\n                initialValues={{\r\n                    charName: '',\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string()\r\n                            .max(30, \"Max length is 15\")\r\n                            .required(\"This field is required\"),\r\n                })}\r\n                onSubmit = {(values) => {\r\n                    updateChar(values.charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label htmlFor=\"search\">\r\n                        Or find character by Name:     \r\n                    </label>\r\n                    <div className=\"char__search-panel\">\r\n                        <Field \r\n                            id=\"search\" \r\n                            name=\"charName\" \r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\"\r\n                            className=\"char__search-input\"\r\n                        />\r\n                        <button \r\n                            type=\"submit\" \r\n                            className='button button__main'\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">\r\n                                FIND\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMEssage component='div' className='char__search-error' name=\"charName\"/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CharSearch;","import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\nimport ImgObjFit from '../blocks/imgObjectFit';\r\nimport CharSearch from '../search/CharSearch';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n  \r\n    const [char, setChar] = useState(null);\r\n    const { loading, error, getCharacter, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        \r\n    },[props.charId])\r\n\r\n   const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n   const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton/>; \r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error  || !char) ? <View char={char} setPagePath={props.setPagePath}/> : null;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"char__info\">\r\n                {skeleton}\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </div>\r\n            <CharSearch setPagePath={props.setPagePath}/> \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst View = ({ char }) => {\r\n    \r\n\r\n    const {name, description, homepage, wiki, comics} = char;\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <ImgObjFit char={char}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        \r\n                        const comicId = item.resourceURI.slice(43);\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i}\r\n                                className=\"char__comics-item\"\r\n                                onClick={() => {\r\n                            }}>\r\n                                <Link to={`/comics/${comicId}`}>\r\n                                    {item.name}\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state={\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/> \r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport { useState } from \"react\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst MainPage = () => {\r\n    let location = useLocation();\r\n    console.log(location, \"location\");\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"/>\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\nexport default MainPage;\r\n","\r\nimport { useHttp } from '../hooks/http.hook';\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&orderBy=name&apikey=${_apiKey}`);\r\n        // return res.data.results.map(_transformComic);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res  = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            price: comic.prices[0].price === 0 ? \"Not available\" : comic.prices[0].price+'$',\r\n            thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n            url: comic.urls[0].url,\r\n            pageCount: comic.pageCount || 'No information about the number of pages',\r\n            // language: comic.textObjects[0] === undefined ? 'en - us' : comic.textObjects[0].language,\r\n            language: comic.textObjects?.length ? comic.textObjects[0].language : 'en-us',\r\n            description: comic.description || 'There is no description',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [ loading, setLoading ] = useState(false);\r\n    const [ error, setError ] = useState(null);\r\n\r\n    const request = useCallback( async (url, method='GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            \r\n            if (!responce.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${responce.status}`);\r\n            }\r\n\r\n            const data = await responce.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(()=> setError(null), []);\r\n\r\n    return { loading, request, error, clearError }\r\n\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","thumbnail","char","className","View","name","description","homepage","wiki","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","Items","props","charId","setCharId","isFocused","setFocus","itemRefs","useRef","charlist","map","item","i","classNames","CSSTransition","in","timeout","ref","el","current","onCharSelected","elem","onItemSelected","tabIndex","onKeyPress","e","key","forEach","classList","remove","add","focus","focusOnItem","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","TransitionGroup","component","disabled","getCharacterByName","SearchSuccess","to","results","initialValues","charName","validationSchema","Yup","max","required","onSubmit","values","htmlFor","type","placeholder","comics","comicId","resourceURI","slice","skeleton","setPagePath","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","location","useLocation","selectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","responce","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllComics","res","_transformComic","_transformCharacter","getComic","comic","title","price","prices","path","extension","urls","pageCount","language","textObjects","items"],"sourceRoot":""}