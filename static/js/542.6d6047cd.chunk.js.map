{"version":3,"file":"static/js/542.6d6047cd.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/skeleton/Skeleton.js","utils/setContent.js","components/blocks/imgObjectFit.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/search/CharSearch.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px', objectFit:\r\n         'contain', margin: '0 auto' }} src={img} alt=\"error img\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\nimport Spinner from \"../components/spinner/Spinner\";\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>\r\n            // eslint-disable-next-line\r\n            break;\r\n        case 'loading':\r\n            return <Spinner/>\r\n            // eslint-disable-next-line\r\n            break;\r\n        case 'confirmed': \r\n            return <Component data={data}/>\r\n            // eslint-disable-next-line\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n            // eslint-disable-next-line\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');    \r\n    }\r\n}\r\n\r\n\r\n\r\nexport default setContent;","\r\n\r\nconst ImgObjFit = ({char}) => {\r\n    const {thumbnail} = char;\r\n    \r\n    if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" || thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\") {\r\n        return (\r\n            <img src={thumbnail} \r\n            alt=\"Random character\" \r\n            style={{objectFit:\"contain\"}} \r\n            className=\"randomchar__img\"/>\r\n        )\r\n    } else {\r\n        return (\r\n            <img src={thumbnail} \r\n            alt=\"Random character\" \r\n            className=\"randomchar__img\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImgObjFit;","import { useEffect, useState } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport ImgObjFit from '../blocks/imgObjectFit';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport './randomChar.scss';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(()=> {\r\n        updateChar();\r\n        const timerId = setInterval(updateChar, 60000);\r\n\r\n        return () => {\r\n            clearInterval(timerId)\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() =>setProcess('confirmed'));\r\n    }\r\n\r\n    // const errorMessage = error ? <ErrorMessage/> : null;\r\n    // const spinner = loading ? <Spinner/> : null;\r\n    // const content = !(loading || error) ? <View char={char}/> : null;\r\n    \r\n    return (\r\n        <div className=\"randomchar\">\r\n            {setContent(process, View, char)}\r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button className=\"button button__main\">\r\n                    <div className=\"inner\"\r\n                           onClick={updateChar}>try it\r\n                    </div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    const {name, description, homepage, wiki} = data;\r\n    \r\n    return (\r\n            <div className=\"randomchar__block\">\r\n                <ImgObjFit char={data}/>\r\n                <div className=\"randomchar__info\">\r\n                    <p className=\"randomchar__name\">{name}</p>\r\n                    <p className=\"randomchar__descr\">\r\n                        {description}\r\n                    </p>\r\n                    <div className=\"randomchar__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\n// const Img = ({char}) => {\r\n//     const {thumbnail} = char;\r\n    \r\n//     if (thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\r\n//         return (\r\n//             <img src={thumbnail} alt=\"Random character\" style={{objectFit:\"contain\"}} className=\"randomchar__img\"/>\r\n//         )\r\n//     } else {\r\n//         return (\r\n//             <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\r\n//         )\r\n//     }\r\n// }\r\n\r\nexport default RandomChar;","import useMarvelService from '../../services/MarvelService';\r\nimport { useState, useEffect, useRef, useMemo } from 'react';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport propTypes from 'prop-types';\r\n\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charList.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>\r\n            // eslint-disable-next-line\r\n            break;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>\r\n            // eslint-disable-next-line\r\n            break;\r\n        case 'confirmed': \r\n            return <Component/>\r\n            // eslint-disable-next-line\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n            // eslint-disable-next-line\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');    \r\n    }\r\n}\r\n\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const { getAllCharacters, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    },[])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharListLoaded = async (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList([...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset + 9);\r\n        setCharEnded(ended);\r\n    }\r\n        \r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems (arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit': 'cover'};\r\n\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit': 'unset'};\r\n            }\r\n\r\n            return (\r\n                <CSSTransition key={item.id} timeout={300} classNames='char__item'>\r\n                    <li className='char__item'\r\n                        tabIndex={0}\r\n                        ref={el => itemRefs.current[i] = el}\r\n                        onClick={() => {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }}\r\n                        onKeyPress={(e) => {\r\n                            if (e.key === ' ' || e.key === 'Enter') {\r\n                                props.onCharSelected(item.id);\r\n                                focusOnItem(i);\r\n                            }\r\n                        }}>\r\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                            <div className='char__name'>{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className='char__grid'>\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    // const items = renderItems(charList)\r\n    // const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n    // const errorMessage = error ? <ErrorMessage/> : null;\r\n    \r\n    // const content = !(loading || error) ? <Items onCharSelected={props.onCharSelected} charlist={charList}/> : null;\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderItems(charList), newItemLoading)\r\n        // eslint-disable-next-line\r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            <div className='char__loading'></div>\r\n            {elements}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// const Items = (props) => {\r\n\r\n//     const [charId, setCharId] = useState(null);\r\n//     // const [selected, setSelect] = useState(false);\r\n//     const [isFocused, setFocus] = useState(false);\r\n\r\n//     const onItemSelected = (id, elem) => {\r\n//         setCharId(id);\r\n//         // setSelect(true);\r\n//         setFocus(true);\r\n//     }\r\n\r\n   \r\n\r\n\r\n//     return (\r\n//         props.charlist.map((item, i) => {\r\n//             const {id, name} = item;\r\n//             // console.log(comics, \"item from props\");\r\n//             let classNames = 'char__item';\r\n//             if (id === charId && isFocused) {\r\n//                 classNames += ' char__item_selected';\r\n//             }\r\n        \r\n//             return (\r\n//                 <CSSTransition in={true} key={id} timeout={300} classNames=\"char__item\">\r\n//                     <li className={classNames}\r\n//                         key={id}\r\n//                         ref={el => itemRefs.current[i] = el}\r\n//                         onClick={() => {\r\n//                             props.onCharSelected(id);\r\n//                             onItemSelected(id);\r\n//                         }}\r\n//                         tabIndex='0'\r\n//                         onKeyPress={(e) => { \r\n//                             if (e.key === ' ' || e.key === \"Enter\") {\r\n//                                 props.onCharSelected(id);\r\n//                                 focusOnItem(i);\r\n//                             }}}>\r\n//                         <ImgObjFit char={item} alt={name}/>\r\n//                         <div className=\"char__name\">{name}</div>\r\n//                     </li>\r\n//                 </CSSTransition>\r\n//             )\r\n//         })\r\n//     )\r\n// }\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: propTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\nimport { useState } from 'react';\r\nimport { ErrorMessage as FormikErrorMEssage, Field, Form, Formik } from 'formik';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearch.scss';\r\n\r\n\r\n\r\n\r\nconst setContent = (process, Component, char) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return null\r\n            // eslint-disable-next-line\r\n            break;\r\n        case 'loading': \r\n            return <div>Loading...</div>\r\n            // eslint-disable-next-line\r\n            break;\r\n        case 'confirmed': \r\n            return char.length > 0 ? <Component/> : <div className='char__search-error'>The character was not found. Check the name and try again.</div>\r\n             // eslint-disable-next-line\r\n            break;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n             // eslint-disable-next-line\r\n            break;\r\n        default:\r\n            throw new Error('Unexpected process state');    \r\n    }\r\n}\r\n\r\n\r\nconst CharSearch = () => {\r\n    const {process, setProcess, getCharacterByName,clearError} = useMarvelService();\r\n    const [char, setChar] = useState(null);\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n            setChar(char);\r\n        }\r\n\r\n   \r\n    const SearchSuccess = () => {\r\n        return (\r\n            <div className='char__search-info'>\r\n                <div className='char__search-success'>\r\n                    There is! Visit \r\n                        <span className='search-success'> {char[0].name} </span> \r\n                    page?\r\n                </div>\r\n                <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                    <div className=\"inner\">TO PAGE</div>\r\n                </Link>\r\n            </div>  \r\n        )\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"char__search\">\r\n            <Formik \r\n                initialValues={{\r\n                    charName: '',\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string()\r\n                            .max(30, \"Max length is 15\")\r\n                            .required(\"This field is required\"),\r\n                })}\r\n                onSubmit = {(values) => {\r\n                    updateChar(values.charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label htmlFor=\"search\">\r\n                        Or find character by Name:     \r\n                    </label>\r\n                    <div className=\"char__search-panel\">\r\n                        <Field \r\n                            id=\"search\" \r\n                            name=\"charName\" \r\n                            type=\"text\"\r\n                            placeholder=\"Enter name\"\r\n                            className=\"char__search-input\"\r\n                        />\r\n                        <button \r\n                            type=\"submit\" \r\n                            className='button button__main'\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">\r\n                                FIND\r\n                            </div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMEssage component='div' className='char__search-error' name=\"charName\"/>\r\n                </Form>\r\n            </Formik>\r\n            {setContent(process, SearchSuccess, char)}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CharSearch;","import { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ImgObjFit from '../blocks/imgObjectFit';\r\nimport CharSearch from '../search/CharSearch';\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport './charInfo.scss';\r\n\r\nconst CharInfo = (props) => {\r\n  \r\n    const [char, setChar] = useState(null);\r\n    const { getCharacter, clearError, process, setProcess } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    },[props.charId])\r\n\r\n   const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n   const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    // const skeleton = char || loading || error ? null : <Skeleton/>; \r\n    // const errorMessage = error ? <ErrorMessage/> : null;\r\n    // const spinner = loading ? <Spinner/> : null;\r\n    // const content = !(loading || error  || !char) ? <View char={char} setPagePath={props.setPagePath}/> : null;\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"char__info\">\r\n                {setContent(process, View, char)}\r\n            </div>\r\n            <CharSearch setPagePath={props.setPagePath}/> \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst View = ({ data }) => {\r\n    \r\n\r\n    const {name, description, homepage, wiki, comics} = data;\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <ImgObjFit char={data}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        \r\n                        const comicId = item.resourceURI.slice(43);\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i}\r\n                                className=\"char__comics-item\"\r\n                                onClick={() => {\r\n                            }}>\r\n                                <Link to={`/comics/${comicId}`}>\r\n                                    {item.name}\r\n                                </Link>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state={\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/> \r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport { useState } from \"react\";\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"/>\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\nexport default MainPage;\r\n","import { useHttp } from '../hooks/http.hook';\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess } = useHttp();\r\n\r\n    const _apiBase ='https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'ecbc50ab1d1d150b779bd5f2481d19e0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformComic);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&orderBy=name&apikey=${_apiKey}`);\r\n        // return res.data.results.map(_transformComic);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?apikey=${_apiKey}`);\r\n        return _transformComic(res.data.results[0]);\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res  = await request(`${_apiBase}characters?limit=9&offset=${offset}&apikey=${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?apikey=${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComic = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            price: comic.prices[0].price === 0 ? \"Not available\" : comic.prices[0].price+'$',\r\n            thumbnail: comic.thumbnail.path + \".\" + comic.thumbnail.extension,\r\n            url: comic.urls[0].url,\r\n            pageCount: comic.pageCount || 'No information about the number of pages',\r\n            // language: comic.textObjects[0] === undefined ? 'en - us' : comic.textObjects[0].language,\r\n            language: comic.textObjects?.length ? comic.textObjects[0].language : 'en-us',\r\n            description: comic.description || 'There is no description',\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0,210)}...` : 'There is no description for this character...',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n    return {\r\n            getAllCharacters, \r\n            process,\r\n            setProcess, \r\n            getCharacter, \r\n            clearError, \r\n            getAllComics, \r\n            getComic, \r\n            getCharacterByName\r\n        }\r\n}\r\n\r\nexport default useMarvelService;\r\n\r\n\r\n\r\n\r\n// const postData = async (url, data) => {\r\n//     let res = await fetch(url, {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: data\r\n//     });\r\n//     return await res.json();\r\n// };\r\n\r\n// async function getResource(url) {\r\n//     let res = await fetch(url);\r\n\r\n//     if (!res.ok) {\r\n//         throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n//     }\r\n\r\n//     return await res.json();\r\n// }\r\n\r\n// export {postData};\r\n// export {getResource};","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    // const [ loading, setLoading ] = useState(false);\r\n    // const [ error, setError ] = useState(null);\r\n    const [process, setProcess] = useState('waiting')\r\n\r\n    const request = useCallback( async (url, method='GET', body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const responce = await fetch(url, {method, body, headers});\r\n            \r\n            if (!responce.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${responce.status}`);\r\n            }\r\n\r\n            const data = await responce.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, [])\r\n\r\n    const clearError = useCallback(()=> {\r\n        setProcess('loading')\r\n    }, []);\r\n\r\n    return { request, clearError, process, setProcess }\r\n\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","className","process","Component","data","Spinner","ErrorMessage","Error","thumbnail","char","View","name","description","homepage","wiki","href","useState","setChar","useMarvelService","getCharacter","clearError","setProcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","items","map","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","getCharacterByName","initialValues","charName","validationSchema","Yup","max","required","onSubmit","values","htmlFor","type","placeholder","to","comics","comicId","resourceURI","slice","charId","setPagePath","ErrorBoundary","state","error","errorInfo","console","log","this","setState","children","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","responce","ok","status","json","useHttp","_apiBase","_apiKey","getAllComics","res","results","_transformComic","_transformCharacter","getComic","comic","title","price","prices","path","extension","urls","pageCount","language","textObjects"],"sourceRoot":""}